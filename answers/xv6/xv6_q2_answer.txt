The open system call in xv6 is implemented in the `sys_open` function in the `sysfile.c` file (Chunk 1). 

In the `sys_open` function, the system call first retrieves the file path and open mode from user space using `argint` and `argstr` functions. It then begins an operation using `begin_op` to acquire the file system lock. Depending on the open mode specified, it either creates a new file using the `create` function or looks up an existing file using `namei`.

If the file is a device file, it checks the major device number to ensure it is within the valid range. It then allocates a file descriptor and associates it with the file using `filealloc` and `fdalloc`. The file descriptor's type is set based on whether it is a device or an inode, and its read/write permissions are determined by the open mode.

If the `O_TRUNC` flag is set and the file is a regular file, it truncates the file using `itrunc`. Finally, it unlocks the inode and ends the file system operation before returning the file descriptor.

Overall, the `sys_open` system call in xv6 creates new files by either creating a new file with specified permissions or opening an existing file, associating it with a file descriptor, and setting up the necessary file structures for subsequent read/write operations.