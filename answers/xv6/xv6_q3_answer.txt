In the xv6 codebase, the function used to allocate a page of memory in the kernel is `kalloc()`. This function is used in multiple places throughout the codebase, such as in the `uvmalloc` function in `vm.c` (Chunk 4) and in the `allocproc` function in `proc.c` (Chunk 9). 

Specifically, in the `uvmalloc` function in `vm.c`, `kalloc()` is called to allocate memory for a new page, which is then mapped to the process's address space. If the allocation fails, the function returns 0, indicating an out-of-memory condition.

Similarly, in the `allocproc` function in `proc.c`, `kalloc()` is used to allocate memory for the trapframe of a new process. If the allocation fails, the function frees the process and returns 0.

Therefore, `kalloc()` is the function used by xv6 to allocate a page of memory in the kernel.