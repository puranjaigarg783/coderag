[
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/riscv.h",
    "filename": "riscv.h",
    "relpath": "kernel/riscv.h",
    "start_line": 216,
    "end_line": 341,
    "length": 126,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// use riscv's sv39 page table scheme.\n#define SATP_SV39 (8L << 60)\n\n#define MAKE_SATP(pagetable) (SATP_SV39 | (((uint64)pagetable) >> 12))\n\n// supervisor address translation and protection;\n// holds the address of the page table.\nstatic inline void \nw_satp(uint64 x)\n{\n  asm volatile(\"csrw satp, %0\" : : \"r\" (x));\n}",
    "chunk_function_names": [
      "w_pmpaddr0",
      "w_satp",
      "r_satp",
      "r_scause",
      "r_stval",
      "w_mcounteren",
      "r_mcounteren",
      "r_time",
      "intr_on",
      "intr_off",
      "intr_get",
      "r_sp",
      "hartid",
      "w_tp",
      "r_ra"
    ],
    "document_function_names": [
      "hart",
      "MSTATUS_MPP_MASK",
      "w_mstatus",
      "w_mepc",
      "SSTATUS_SPP",
      "w_sstatus",
      "r_sip",
      "w_sip",
      "SIE_SEIE",
      "w_sie",
      "MIE_STIE",
      "w_mie",
      "w_sepc",
      "r_sepc",
      "r_medeleg",
      "w_medeleg",
      "r_mideleg",
      "w_mideleg",
      "w_stvec",
      "r_stvec",
      "r_stimecmp",
      "w_stimecmp",
      "r_menvcfg",
      "w_menvcfg",
      "w_pmpcfg0",
      "w_pmpaddr0",
      "w_satp",
      "r_satp",
      "r_scause",
      "r_stval",
      "w_mcounteren",
      "r_mcounteren",
      "r_time",
      "intr_on",
      "intr_off",
      "intr_get",
      "r_sp",
      "hartid",
      "w_tp",
      "r_ra",
      "sfence_vma"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/riscv.h",
    "filename": "riscv.h",
    "relpath": "kernel/riscv.h",
    "start_line": 1,
    "end_line": 382,
    "length": 382,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// __ASSEMBLER__\n\n// extract the three 9-bit page table indices from a virtual address.\n#define PXMASK          0x1FF // 9 bits\n#define PXSHIFT(level)  (PGSHIFT+(9*(level)))\n#define PX(level, va) ((((uint64) (va)) >> PXSHIFT(level)) & PXMASK)",
    "document_function_names": [
      "hart",
      "MSTATUS_MPP_MASK",
      "w_mstatus",
      "w_mepc",
      "SSTATUS_SPP",
      "w_sstatus",
      "r_sip",
      "w_sip",
      "SIE_SEIE",
      "w_sie",
      "MIE_STIE",
      "w_mie",
      "w_sepc",
      "r_sepc",
      "r_medeleg",
      "w_medeleg",
      "r_mideleg",
      "w_mideleg",
      "w_stvec",
      "r_stvec",
      "r_stimecmp",
      "w_stimecmp",
      "r_menvcfg",
      "w_menvcfg",
      "w_pmpcfg0",
      "w_pmpaddr0",
      "w_satp",
      "r_satp",
      "r_scause",
      "r_stval",
      "w_mcounteren",
      "r_mcounteren",
      "r_time",
      "intr_on",
      "intr_off",
      "intr_get",
      "r_sp",
      "hartid",
      "w_tp",
      "r_ra",
      "sfence_vma"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/vm.c",
    "filename": "vm.c",
    "relpath": "kernel/vm.c",
    "start_line": 81,
    "end_line": 142,
    "length": 62,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "pte_t *\nwalk(pagetable_t pagetable, uint64 va, int alloc)\n{\n  if(va >= MAXVA)\n    panic(\"walk\");\n\n  for(int level = 2; level > 0; level--) {\n    pte_t *pte = &pagetable[PX(level, va)];\n    if(*pte & PTE_V) {\n      pagetable = (pagetable_t)PTE2PA(*pte);\n    } else {\n      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)\n        return 0;\n      memset(pagetable, 0, PGSIZE);\n      *pte = PA2PTE(pagetable) | PTE_V;\n    }\n  }\n  return &pagetable[PX(0, va)];\n}\n\nuint64\nwalkaddr(pagetable_t pagetable, uint64 va)\n{\n  pte_t *pte;\n  uint64 pa;\n\n  if(va >= MAXVA)\n    return 0;\n\n  pte = walk(pagetable, va, 0);\n  if(pte == 0)\n    return 0;\n  if((*pte & PTE_V) == 0)\n    return 0;\n  if((*pte & PTE_U) == 0)\n    return 0;\n  pa = PTE2PA(*pte);\n  return pa;\n}",
    "chunk_function_names": [
      "walkaddr",
      "kvmmap"
    ],
    "document_function_names": [
      "kvmmake",
      "kvminit",
      "kvminithart",
      "walkaddr",
      "kvmmap",
      "walk",
      "uvmunmap",
      "uvmcreate",
      "uvmfirst",
      "uvmalloc",
      "uvmdealloc",
      "freewalk",
      "uvmfree",
      "uvmcopy",
      "uvmclear",
      "copyout",
      "copyin",
      "copyinstr"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/vm.c",
    "filename": "vm.c",
    "relpath": "kernel/vm.c",
    "start_line": 1,
    "end_line": 81,
    "length": 81,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// Make a direct-map page table for the kernel.\npagetable_t\nkvmmake(void)\n{\n  pagetable_t kpgtbl;\n\n  kpgtbl = (pagetable_t) kalloc();\n  memset(kpgtbl, 0, PGSIZE);\n\n  // uart registers\n  kvmmap(kpgtbl, UART0, UART0, PGSIZE, PTE_R | PTE_W);\n\n  // virtio mmio disk interface\n  kvmmap(kpgtbl, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);\n\n  // PLIC\n  kvmmap(kpgtbl, PLIC, PLIC, 0x4000000, PTE_R | PTE_W);\n\n  // map kernel text executable and read-only.\n  kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);\n\n  // map kernel data and the physical RAM we'll make use of.\n  kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);\n\n  // map the trampoline for trap entry/exit to\n  // the highest virtual address in the kernel.\n  kvmmap(kpgtbl, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);\n\n  // allocate and map a kernel stack for each process.\n  proc_mapstacks(kpgtbl);\n  \n  return kpgtbl;\n}\n\n// Initialize the one kernel_pagetable\nvoid\nkvminit(void)\n{\n  kernel_pagetable = kvmmake();\n}\n\n// Return the address of the PTE in page table pagetable\n// that corresponds to virtual address va.  If alloc!=0,\n// create any required page-table pages.",
    "chunk_function_names": [
      "kvmmake",
      "kvminit",
      "kvminithart"
    ],
    "document_function_names": [
      "kvmmake",
      "kvminit",
      "kvminithart",
      "walkaddr",
      "kvmmap",
      "walk",
      "uvmunmap",
      "uvmcreate",
      "uvmfirst",
      "uvmalloc",
      "uvmdealloc",
      "freewalk",
      "uvmfree",
      "uvmcopy",
      "uvmclear",
      "copyout",
      "copyin",
      "copyinstr"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/memlayout.h",
    "filename": "memlayout.h",
    "relpath": "kernel/memlayout.h",
    "start_line": 1,
    "end_line": 59,
    "length": 59,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// the kernel expects there to be RAM\n// for use by the kernel and user pages\n// from physical address 0x80000000 to PHYSTOP.\n#define KERNBASE 0x80000000L\n#define PHYSTOP (KERNBASE + 128*1024*1024)"
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/riscv.h",
    "filename": "riscv.h",
    "relpath": "kernel/riscv.h",
    "start_line": 341,
    "end_line": 352,
    "length": 12,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "typedef uint64 pte_t;\ntypedef uint64 *pagetable_t; // 512 PTEs\n\n#endif",
    "chunk_function_names": [
      "sfence_vma"
    ],
    "document_function_names": [
      "hart",
      "MSTATUS_MPP_MASK",
      "w_mstatus",
      "w_mepc",
      "SSTATUS_SPP",
      "w_sstatus",
      "r_sip",
      "w_sip",
      "SIE_SEIE",
      "w_sie",
      "MIE_STIE",
      "w_mie",
      "w_sepc",
      "r_sepc",
      "r_medeleg",
      "w_medeleg",
      "r_mideleg",
      "w_mideleg",
      "w_stvec",
      "r_stvec",
      "r_stimecmp",
      "w_stimecmp",
      "r_menvcfg",
      "w_menvcfg",
      "w_pmpcfg0",
      "w_pmpaddr0",
      "w_satp",
      "r_satp",
      "r_scause",
      "r_stval",
      "w_mcounteren",
      "r_mcounteren",
      "r_time",
      "intr_on",
      "intr_off",
      "intr_get",
      "r_sp",
      "hartid",
      "w_tp",
      "r_ra",
      "sfence_vma"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/vm.c",
    "filename": "vm.c",
    "relpath": "kernel/vm.c",
    "start_line": 142,
    "end_line": 231,
    "length": 90,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "int\nmappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)\n{\n  uint64 a, last;\n  pte_t *pte;\n\n  if((va % PGSIZE) != 0)\n    panic(\"mappages: va not aligned\");\n\n  if((size % PGSIZE) != 0)\n    panic(\"mappages: size not aligned\");\n\n  if(size == 0)\n    panic(\"mappages: size\");\n  \n  a = va;\n  last = va + size - PGSIZE;\n  for(;;){\n    if((pte = walk(pagetable, a, 1)) == 0)\n      return -1;\n    if(*pte & PTE_V)\n      panic(\"mappages: remap\");\n    *pte = PA2PTE(pa) | perm | PTE_V;\n    if(a == last)\n      break;\n    a += PGSIZE;\n    pa += PGSIZE;\n  }\n  return 0;\n}",
    "chunk_function_names": [
      "mappages",
      "uvmunmap",
      "uvmcreate",
      "uvmfirst"
    ],
    "document_function_names": [
      "kvmmake",
      "kvminit",
      "kvminithart",
      "walkaddr",
      "kvmmap",
      "walk",
      "uvmunmap",
      "uvmcreate",
      "uvmfirst",
      "uvmalloc",
      "uvmdealloc",
      "freewalk",
      "uvmfree",
      "uvmcopy",
      "uvmclear",
      "copyout",
      "copyin",
      "copyinstr"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/main.c",
    "filename": "main.c",
    "relpath": "kernel/main.c",
    "start_line": 1,
    "end_line": 45,
    "length": 45,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// start() jumps here in supervisor mode on all CPUs.\nvoid\nmain()\n{\n  if(cpuid() == 0){\n    kinit();         // physical page allocator\n    kvminit();       // create kernel page table\n    kvminithart();   // turn on paging\n  } else {\n    kvminithart();    // turn on paging\n  }\n\n  scheduler();        \n}",
    "chunk_function_names": [
      "main"
    ],
    "document_function_names": [
      "main"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/vm.c",
    "filename": "vm.c",
    "relpath": "kernel/vm.c",
    "start_line": 231,
    "end_line": 311,
    "length": 81,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "uint64\nuvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)\n{\n  char *mem;\n  uint64 a;\n\n  if(newsz < oldsz)\n    return oldsz;\n\n  oldsz = PGROUNDUP(oldsz);\n  for(a = oldsz; a < newsz; a += PGSIZE){\n    mem = kalloc();\n    if(mem == 0){\n      uvmdealloc(pagetable, a, oldsz);\n      return 0;\n    }\n    memset(mem, 0, PGSIZE);\n    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){\n      kfree(mem);\n      uvmdealloc(pagetable, a, oldsz);\n      return 0;\n    }\n  }\n  return newsz;\n}\n\nuint64\nuvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)\n{\n  if(newsz >= oldsz)\n    return oldsz;\n\n  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){\n    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;\n    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);\n  }\n\n  return newsz;\n}\n\nvoid\nfreewalk(pagetable_t pagetable)\n{\n  for(int i = 0; i < 512; i++){\n    pte_t pte = pagetable[i];\n    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){\n      uint64 child = PTE2PA(pte);\n      freewalk((pagetable_t)child);\n      pagetable[i] = 0;\n    } else if(pte & PTE_V){\n      panic(\"freewalk: leaf\");\n    }\n  }\n  kfree((void*)pagetable);\n}\n\nvoid\nuvmfree(pagetable_t pagetable, uint64 sz)\n{\n  if(sz > 0)\n    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);\n  freewalk(pagetable);\n}",
    "chunk_function_names": [
      "uvmalloc",
      "uvmdealloc",
      "freewalk",
      "uvmfree"
    ],
    "document_function_names": [
      "kvmmake",
      "kvminit",
      "kvminithart",
      "walkaddr",
      "kvmmap",
      "walk",
      "uvmunmap",
      "uvmcreate",
      "uvmfirst",
      "uvmalloc",
      "uvmdealloc",
      "freewalk",
      "uvmfree",
      "uvmcopy",
      "uvmclear",
      "copyout",
      "copyin",
      "copyinstr"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/vm.c",
    "filename": "vm.c",
    "relpath": "kernel/vm.c",
    "start_line": 311,
    "end_line": 387,
    "length": 77,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "int\nuvmcopy(pagetable_t old, pagetable_t new, uint64 sz)\n{\n  pte_t *pte;\n  uint64 pa, i;\n  uint flags;\n  char *mem;\n\n  for(i = 0; i < sz; i += PGSIZE){\n    if((pte = walk(old, i, 0)) == 0)\n      panic(\"uvmcopy: pte should exist\");\n    if((*pte & PTE_V) == 0)\n      panic(\"uvmcopy: page not present\");\n    pa = PTE2PA(*pte);\n    flags = PTE_FLAGS(*pte);\n    if((mem = kalloc()) == 0)\n      goto err;\n    memmove(mem, (char*)pa, PGSIZE);\n    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){\n      kfree(mem);\n      goto err;\n    }\n  }\n  return 0;\n\n err:\n  uvmunmap(new, 0, i / PGSIZE, 1);\n  return -1;\n}",
    "chunk_function_names": [
      "uvmcopy",
      "uvmclear",
      "copyout"
    ],
    "document_function_names": [
      "kvmmake",
      "kvminit",
      "kvminithart",
      "walkaddr",
      "kvmmap",
      "walk",
      "uvmunmap",
      "uvmcreate",
      "uvmfirst",
      "uvmalloc",
      "uvmdealloc",
      "freewalk",
      "uvmfree",
      "uvmcopy",
      "uvmclear",
      "copyout",
      "copyin",
      "copyinstr"
    ]
  }
]