[
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/trap.c",
    "filename": "trap.c",
    "relpath": "kernel/trap.c",
    "start_line": 133,
    "end_line": 217,
    "length": 85,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "void \nkerneltrap()\n{\n  uint64 sepc = r_sepc();\n  uint64 sstatus = r_sstatus();\n  uint64 scause = r_scause();\n  \n  if((sstatus & SSTATUS_SPP) == 0)\n    panic(\"kerneltrap: not from supervisor mode\");\n  if(intr_get() != 0)\n    panic(\"kerneltrap: interrupts enabled\");\n\n  int which_dev = devintr();\n\n  if(which_dev == 2 && myproc() != 0)\n    yield();\n\n  w_sepc(sepc);\n  w_sstatus(sstatus);\n}\n\nvoid\nclockintr()\n{\n  if(cpuid() == 0){\n    acquire(&tickslock);\n    ticks++;\n    wakeup(&ticks);\n    release(&tickslock);\n  }\n\n  w_stimecmp(r_time() + 1000000);\n}\n\nint\ndevintr()\n{\n  uint64 scause = r_scause();\n\n  if(scause == 0x8000000000000009L){\n    int irq = plic_claim();\n\n    if(irq == UART0_IRQ){\n      uartintr();\n    } else if(irq == VIRTIO0_IRQ){\n      virtio_disk_intr();\n    } else if(irq){\n      printf(\"unexpected interrupt irq=%d\\n\", irq);\n    }\n\n    if(irq)\n      plic_complete(irq);\n\n    return 1;\n  } else if(scause == 0x8000000000000005L){\n    clockintr();\n    return 2;\n  } else {\n    return 0;\n  }\n}",
    "chunk_function_names": [
      "kerneltrap",
      "clockintr",
      "devintr"
    ],
    "document_function_names": [
      "trapinit",
      "trapinithart",
      "usertrap",
      "usertrapret",
      "kerneltrap",
      "clockintr",
      "devintr"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/riscv.h",
    "filename": "riscv.h",
    "relpath": "kernel/riscv.h",
    "start_line": 216,
    "end_line": 341,
    "length": 126,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// enable device interrupts\nstatic inline void\nintr_on()\n{\n  w_sstatus(r_sstatus() | SSTATUS_SIE);\n}\n\n// disable device interrupts\nstatic inline void\nintr_off()\n{\n  w_sstatus(r_sstatus() & ~SSTATUS_SIE);\n}\n\n// are device interrupts enabled?\nstatic inline int\nintr_get()\n{\n  uint64 x = r_sstatus();\n  return (x & SSTATUS_SIE) != 0;\n}",
    "chunk_function_names": [
      "w_pmpaddr0",
      "w_satp",
      "r_satp",
      "r_scause",
      "r_stval",
      "w_mcounteren",
      "r_mcounteren",
      "r_time",
      "intr_on",
      "intr_off",
      "intr_get",
      "r_sp",
      "hartid",
      "w_tp",
      "r_ra"
    ],
    "document_function_names": [
      "hart",
      "MSTATUS_MPP_MASK",
      "w_mstatus",
      "w_mepc",
      "SSTATUS_SPP",
      "w_sstatus",
      "r_sip",
      "w_sip",
      "SIE_SEIE",
      "w_sie",
      "MIE_STIE",
      "w_mie",
      "w_sepc",
      "r_sepc",
      "r_medeleg",
      "w_medeleg",
      "r_mideleg",
      "w_mideleg",
      "w_stvec",
      "r_stvec",
      "r_stimecmp",
      "w_stimecmp",
      "r_menvcfg",
      "w_menvcfg",
      "w_pmpcfg0",
      "w_pmpaddr0",
      "w_satp",
      "r_satp",
      "r_scause",
      "r_stval",
      "w_mcounteren",
      "r_mcounteren",
      "r_time",
      "intr_on",
      "intr_off",
      "intr_get",
      "r_sp",
      "hartid",
      "w_tp",
      "r_ra",
      "sfence_vma"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/riscv.h",
    "filename": "riscv.h",
    "relpath": "kernel/riscv.h",
    "start_line": 1,
    "end_line": 100,
    "length": 100,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// Machine Status Register, mstatus\n\n#define MSTATUS_MIE (1L << 3)    // machine-mode interrupt enable.\n\nstatic inline uint64\nr_mstatus()\n{\n  uint64 x;\n  asm volatile(\"csrr %0, mstatus\" : \"=r\" (x) );\n  return x;\n}\n\nstatic inline void \nw_mstatus(uint64 x)\n{\n  asm volatile(\"csrw mstatus, %0\" : : \"r\" (x));\n}\n\n// Supervisor Status Register, sstatus\n\n#define SSTATUS_SIE (1L << 1)  // Supervisor Interrupt Enable\n#define SSTATUS_UIE (1L << 0)  // User Interrupt Enable\n\nstatic inline uint64\nr_sstatus()\n{\n  uint64 x;\n  asm volatile(\"csrr %0, sstatus\" : \"=r\" (x) );\n  return x;\n}\n\nstatic inline void \nw_sstatus(uint64 x)\n{\n  asm volatile(\"csrw sstatus, %0\" : : \"r\" (x));\n}\n\n// Supervisor Interrupt Pending\nstatic inline uint64\nr_sip()\n{\n  uint64 x;\n  asm volatile(\"csrr %0, sip\" : \"=r\" (x) );\n  return x;\n}\n\nstatic inline void \nw_sip(uint64 x)\n{\n  asm volatile(\"csrw sip, %0\" : : \"r\" (x));\n}\n\n// Supervisor Interrupt Enable\n#define SIE_STIE (1L << 5) // timer\n#define SIE_SSIE (1L << 1) // software\nstatic inline uint64\nr_sie()\n{\n  uint64 x;\n  asm volatile(\"csrr %0, sie\" : \"=r\" (x) );\n  return x;\n}\n\nstatic inline void \nw_sie(uint64 x)\n{\n  asm volatile(\"csrw sie, %0\" : : \"r\" (x));\n}",
    "chunk_function_names": [
      "hart",
      "MSTATUS_MPP_MASK",
      "w_mstatus",
      "w_mepc",
      "SSTATUS_SPP",
      "w_sstatus",
      "r_sip",
      "w_sip",
      "SIE_SEIE",
      "w_sie"
    ],
    "document_function_names": [
      "hart",
      "MSTATUS_MPP_MASK",
      "w_mstatus",
      "w_mepc",
      "SSTATUS_SPP",
      "w_sstatus",
      "r_sip",
      "w_sip",
      "SIE_SEIE",
      "w_sie",
      "MIE_STIE",
      "w_mie",
      "w_sepc",
      "r_sepc",
      "r_medeleg",
      "w_medeleg",
      "r_mideleg",
      "w_mideleg",
      "w_stvec",
      "r_stvec",
      "r_stimecmp",
      "w_stimecmp",
      "r_menvcfg",
      "w_menvcfg",
      "w_pmpcfg0",
      "w_pmpaddr0",
      "w_satp",
      "r_satp",
      "r_scause",
      "r_stval",
      "w_mcounteren",
      "r_mcounteren",
      "r_time",
      "intr_on",
      "intr_off",
      "intr_get",
      "r_sp",
      "hartid",
      "w_tp",
      "r_ra",
      "sfence_vma"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/plic.c",
    "filename": "plic.c",
    "relpath": "kernel/plic.c",
    "start_line": 1,
    "end_line": 47,
    "length": 47,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"defs.h\"\n\nvoid\nplicinit(void)\n{\n  // set desired IRQ priorities non-zero (otherwise disabled).\n  *(uint32*)(PLIC + UART0_IRQ*4) = 1;\n  *(uint32*)(PLIC + VIRTIO0_IRQ*4) = 1;\n}\n\nvoid\nplicinithart(void)\n{\n  int hart = cpuid();\n  \n  // set enable bits for this hart's S-mode\n  // for the uart and virtio disk.\n  *(uint32*)PLIC_SENABLE(hart) = (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ);\n\n  // set this hart's S-mode priority threshold to 0.\n  *(uint32*)PLIC_SPRIORITY(hart) = 0;\n}\n\nint\nplic_claim(void)\n{\n  int hart = cpuid();\n  int irq = *(uint32*)PLIC_SCLAIM(hart);\n  return irq;\n}\n\nvoid\nplic_complete(int irq)\n{\n  int hart = cpuid();\n  *(uint32*)PLIC_SCLAIM(hart) = irq;\n}",
    "chunk_function_names": [
      "Controller",
      "plicinithart",
      "plic_claim",
      "plic_complete"
    ],
    "document_function_names": [
      "Controller",
      "plicinithart",
      "plic_claim",
      "plic_complete"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/trap.c",
    "filename": "trap.c",
    "relpath": "kernel/trap.c",
    "start_line": 1,
    "end_line": 88,
    "length": 88,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"spinlock.h\"\n#include \"proc.h\"\n#include \"defs.h\"\n\nstruct spinlock tickslock;\nuint ticks;\n\nextern char trampoline[], uservec[], userret[];\n\nvoid kernelvec();\n\nextern int devintr();\n\nvoid\ntrapinit(void)\n{\n  initlock(&tickslock, \"time\");\n}\n\nvoid\ntrapinithart(void)\n{\n  w_stvec((uint64)kernelvec);\n}\n\nvoid\nusertrap(void)\n{\n  int which_dev = 0;\n\n  if((r_sstatus() & SSTATUS_SPP) != 0)\n    panic(\"usertrap: not from user mode\");\n\n  w_stvec((uint64)kernelvec);\n\n  struct proc *p = myproc();\n  \n  p->trapframe->epc = r_sepc();\n  \n  if(r_scause() == 8){\n    if(killed(p))\n      exit(-1);\n\n    p->trapframe->epc += 4;\n\n    intr_on();\n\n    syscall();\n  } else if((which_dev = devintr()) != 0){\n    // ok\n  } else {\n    printf(\"usertrap(): unexpected scause 0x%lx pid=%d\\n\", r_scause(), p->pid);\n    printf(\"            sepc=0x%lx stval=0x%lx\\n\", r_sepc(), r_stval());\n    setkilled(p);\n  }\n\n  if(killed(p))\n    exit(-1);\n\n  if(which_dev == 2)\n    yield();\n\n  usertrapret();\n}",
    "chunk_function_names": [
      "trapinit",
      "trapinithart",
      "usertrap"
    ],
    "document_function_names": [
      "trapinit",
      "trapinithart",
      "usertrap",
      "usertrapret",
      "kerneltrap",
      "clockintr",
      "devintr"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/start.c",
    "filename": "start.c",
    "relpath": "kernel/start.c",
    "start_line": 1,
    "end_line": 66,
    "length": 66,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"defs.h\"\n\nvoid timerinit();\n\nvoid\nstart()\n{\n  unsigned long x = r_mstatus();\n  x &= ~MSTATUS_MPP_MASK;\n  x |= MSTATUS_MPP_S;\n  w_mstatus(x);\n\n  w_mepc((uint64)main);\n\n  w_satp(0);\n\n  w_medeleg(0xffff);\n  w_mideleg(0xffff);\n  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);\n\n  w_pmpaddr0(0x3fffffffffffffull);\n  w_pmpcfg0(0xf);\n\n  timerinit();\n\n  int id = r_mhartid();\n  w_tp(id);\n\n  asm volatile(\"mret\");\n}\n\nvoid\ntimerinit()\n{\n  w_mie(r_mie() | MIE_STIE);\n  \n  w_menvcfg(r_menvcfg() | (1L << 63)); \n  \n  w_mcounteren(r_mcounteren() | 2);\n  \n  w_stimecmp(r_time() + 1000000);\n}",
    "chunk_function_names": [
      "start",
      "timerinit"
    ],
    "document_function_names": [
      "start",
      "timerinit"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/memlayout.h",
    "filename": "memlayout.h",
    "relpath": "kernel/memlayout.h",
    "start_line": 1,
    "end_line": 59,
    "length": 59,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// qemu -machine virt is set up like this,\n// based on qemu's hw/riscv/virt.c:\n//\n// 02000000 -- CLINT\n// 0C000000 -- PLIC\n// 10000000 -- uart0 \n#define UART0 0x10000000L\n#define UART0_IRQ 10\n\n// qemu puts platform-level interrupt controller (PLIC) here.\n#define PLIC 0x0c000000L\n#define PLIC_PRIORITY (PLIC + 0x0)\n#define PLIC_PENDING (PLIC + 0x1000)\n#define PLIC_SENABLE(hart) (PLIC + 0x2080 + (hart)*0x100)\n#define PLIC_SPRIORITY(hart) (PLIC + 0x201000 + (hart)*0x2000)\n#define PLIC_SCLAIM(hart) (PLIC + 0x201004 + (hart)*0x2000)"
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/spinlock.c",
    "filename": "spinlock.c",
    "relpath": "kernel/spinlock.c",
    "start_line": 1,
    "end_line": 75,
    "length": 75,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// Mutual exclusion spin locks.\n\n#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"spinlock.h\"\n#include \"riscv.h\"\n#include \"proc.h\"\n#include \"defs.h\"\n\nvoid\ninitlock(struct spinlock *lk, char *name)\n{\n  lk->name = name;\n  lk->locked = 0;\n  lk->cpu = 0;\n}\n\n// Acquire the lock.\n// Loops (spins) until the lock is acquired.\nvoid\nacquire(struct spinlock *lk)\n{\n  push_off(); // disable interrupts to avoid deadlock.\n\n  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)\n    ;\n\n  __sync_synchronize();\n\n  lk->cpu = mycpu();\n}\n\n// Release the lock.\nvoid\nrelease(struct spinlock *lk)\n{\n  if(!holding(lk))\n    panic(\"release\");\n\n  lk->cpu = 0;\n\n  __sync_synchronize();\n\n  __sync_lock_release(&lk->locked);\n\n  pop_off();\n}",
    "chunk_function_names": [
      "initlock",
      "acquire",
      "release"
    ],
    "document_function_names": [
      "initlock",
      "acquire",
      "release",
      "holding",
      "intr_off",
      "pop_off"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/sysproc.c",
    "filename": "sysproc.c",
    "relpath": "kernel/sysproc.c",
    "start_line": 1,
    "end_line": 93,
    "length": 93,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// return how many clock tick interrupts have occurred\n// since start.\nuint64\nsys_uptime(void)\n{\n  uint xticks;\n\n  acquire(&tickslock);\n  xticks = ticks;\n  release(&tickslock);\n  return xticks;\n}",
    "chunk_function_names": [
      "sys_exit",
      "sys_getpid",
      "sys_fork",
      "sys_wait",
      "sys_sbrk",
      "sys_sleep",
      "sys_kill",
      "sys_uptime"
    ],
    "document_function_names": [
      "sys_exit",
      "sys_getpid",
      "sys_fork",
      "sys_wait",
      "sys_sbrk",
      "sys_sleep",
      "sys_kill",
      "sys_uptime"
    ]
  },
  {
    "filepath": "/home/puranjai-garg/Projects/usfca/project02-ragnarok/data/xv6-riscv/kernel/spinlock.h",
    "filename": "spinlock.h",
    "relpath": "kernel/spinlock.h",
    "start_line": 1,
    "end_line": 8,
    "length": 8,
    "language": "c",
    "codebase": "xv6",
    "chunking_method": "ast",
    "content": "// Mutual exclusion lock.\nstruct spinlock {\n  uint locked;       // Is the lock held?\n};",
    "chunk_class_names": [
      "spinlock"
    ],
    "document_class_names": [
      "spinlock"
    ]
  }
]