How xv6-riscv Handles Hardware Interrupts
Based on the provided code snippets, here's how xv6-riscv handles hardware interrupts like the clock and UART:

Initialization Process
First, the system initializes interrupt handling during boot in main.c:

trapinit();      // trap vectors
trapinithart();  // install kernel trap vector
plicinit();      // set up interrupt controller
plicinithart();  // ask PLIC for device interrupts
trapinithart() configures the system to handle exceptions by setting the stvec register to point to kernelvec
plicinit() initializes the Platform Level Interrupt Controller (PLIC) and sets priorities for device interrupts
plicinithart() enables specific interrupts (UART and virtio disk) for each CPU core
Interrupt Flow
When a hardware interrupt occurs:

The RISC-V hardware transfers control to the address in the stvec register (which points to kernelvec)
The assembly code in kernelvec.S saves all registers and calls kerneltrap()
kerneltrap() calls devintr() to identify and handle the interrupt
After handling, control returns to the interrupted code
Device Interrupt Handling (via PLIC)
The PLIC (Platform Level Interrupt Controller) manages external device interrupts:

int devintr() {
  uint64 scause = r_scause();

  if(scause == 0x8000000000000009L){
    // this is a supervisor external interrupt, via PLIC.
    int irq = plic_claim();

    if(irq == UART0_IRQ){
      uartintr();
    } else if(irq == VIRTIO0_IRQ){
      virtio_disk_intr();
    }
    // ...
    if(irq)
      plic_complete(irq);
    return 1;
  } else if(scause == 0x8000000000000005L){
    // timer interrupt.
    clockintr();
    return 2;
  }
  // ...
}
The key steps are:

Check scause to determine interrupt type
For external interrupts, use plic_claim() to identify which device caused the interrupt
Call the appropriate handler function
Notify the PLIC the interrupt was handled using plic_complete()
UART Interrupt Handling
When a UART interrupt occurs:

The PLIC detects it and triggers an external interrupt (scause = 0x8000000000000009L)
devintr() identifies it as a UART interrupt (irq == UART0_IRQ) and calls uartintr()
uartintr() processes all available input characters and sends any buffered output:
void uartintr(void) {
  // read and process incoming characters
  while(1){
    int c = uartgetc();
    if(c == -1)
      break;
    consoleintr(c);
  }

  // send buffered characters
  acquire(&uart_tx_lock);
  uartstart();
  release(&uart_tx_lock);
}
Clock Interrupt Handling
Timer interrupts are handled differently from device interrupts:

A timer interrupt sets scause = 0x8000000000000005L
devintr() identifies it and calls clockintr()
clockintr() increments ticks (only on CPU 0), wakes up waiting processes, and schedules the next timer interrupt:
void clockintr() {
  if(cpuid() == 0){
    acquire(&tickslock);
    ticks++;
    wakeup(&ticks);
    release(&tickslock);
  }
  
  // schedule next timer interrupt
  w_stimecmp(r_time() + 1000000);
}
devintr() returns 2 for timer interrupts
kerneltrap() checks if it was a timer interrupt and yields the CPU if appropriate:
// give up the CPU if this is a timer interrupt
if(which_dev == 2 && myproc() != 0)
  yield();
This mechanism allows xv6 to implement preemptive multitasking through timer interrupts.

Summary
xv6-riscv uses a two-level interrupt handling mechanism:

All interrupts go through the trap handling mechanism via kernelvec → kerneltrap → devintr()
Device-specific interrupts are then routed through the PLIC which identifies which device caused the interrupt
Specific handlers (uartintr(), clockintr()) process the actual interrupt
Timer interrupts additionally drive the process scheduler by calling yield()


